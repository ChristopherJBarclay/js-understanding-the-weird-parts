Section 1:
  Don't Imitate, Understand
  Setup with Brackets.io and Google Chrome Developer Tools
  Big Word Alerts
  Frameworks
  
  
Section 2:
  Syntax Parsers, Execution Contexts, Lexical Environments
      - Syntax parser: a program that reads your code and determines what it does and if its grammar is valid. 
          - Compilers and Interpreters: processes your code for the computer. 
          - When you run your code, your code is not what the computer does, 
              it is translated and that translation could tell the computer to do "extra stuff."
      - Lexical Environments: where something sits physically in the code you write.
          - Lexical: having to do with words or grammar
          - A lexical environment exists in programming languages in which where you write something is important.
      - Execution Context: a wrapper to help manage the code that is running. 
          - Manages which part of the code (which lexical environment) is currently running.
          
          
  Name / Value Pairs and Objects
      - Name / Value Pairs: key/value where a name (key) can change but it can only have one value.
      - Object: A collection of name / value pairs. Values can be other objects. 
      
      
  Global Environment and Global Execution
      Global = Not Inside A Function
      - Code is always run inside an Execution Context (wrapper currently executing code in execution context)
          - Global Execution Context = base execution context
              Global Object | this (object)


  Hoisting and Creating an Execution Context
      - Hoisting is often explained as the physical movement of variable and function declarations to the top of the code
          - This is not entirely 
      - Execution Context is Created in two phases.
          - Creation phase: global object and this set up in memory. Outer environment also created.
          - Sets up Memory Space for Variable and Functions - this is called "Hoisting"
              - Puts a placeholder in these memory spaces, called 'undefined', until the code is run and a real value assigned
              - Bad idea to rely on hoisting in any way. Can run into trouble when a value is undefined instead of assigned a value
              - Good idea to always declare variables and functions before using them.
      - The code you write is not actually what's being run, the code is interpreted by the javascript engine and your code is run through that interpretation
      
      
  Javascript and 'undefined'
      - undefined is a special value/keyword that variables receive during creation phase, when memory space is set up for the variable.
      - If var is not used to declare a variable, memory space is never set up for it. It is not defined and will throw an error: Uncaught reference.
          - Never set a variable to undefined yourself. You can do this, but should not because it is dangerous. 
      - Let undefined always mean that "I, the programmer, have not set a value to this variable."
      
      
  Execution Phase: Execution Context Runs Code    
      - Your code is run line by line during this phase.
      - Execution Phase happens after the global object, 'this', and the outer environment has been set up (and all variables and functions have memory set aside)
  Code Execution - Line by Line after the Setup Phase   
      
      
  Single Threaded, Synchronous Execution
       - Meaning: in Javascript, only one thing is happening at a time. 
      - Single Threaded: One command is being executed at a time. 
          - This may not be true under the hood of the browser, because when we run our code, that is not all that is happening in the browser
      - Synchronous Execution: One at a time, and In Order
     
      
   Function Invocation and the Execution Stack
      - Fundamental concept to understanding very important and advanced Javascript topics
      - Invocation: Running/Calling a function. Run the function by using parenthesis ()...
          // Example:
          function b() {}
          function a() { b(); }
          a();
          - Global Execution Context happens first, it will setup memory space for the functions. Then it will run the code line by line.
          - At the line with a(); a new Execution Context is created and placed and placed on the Execution Stack
     
     
    Execution Stack: One on top of the other on top of the other, whichever is on top is currently running.
          - Everytime you execute or invoke a function, a new execution context is created and put on the Execution Stack.
          - Once one execution context ends, it will be popped off the stack, returning to the previous stack. 
          // Example: 
          function a() {
            b();
            var c;
          }
          function b() {
            var d;
          }
          a();
          var d;
          - Memory space is set up during Execution Context for functions a and b.
          - Once we get down to the line with a(); it will invoke function a. that will be put on top of the stack. 
          - Function a invokes function b, which then gets put on top of the stack. Only once function a is done running will it be popped off the stack
          - Every time a function is called, a new Execution Context is created for that function, 'this' is created for that function, and any variables within the function are setup
              - Once the function completes execution, it is popped off the top of the stack and the interpreter moves back to the next item in the stack
   
   
   Functions, Context, and Variable Environments
      - Variable Environments = Where the variables live when they are created, and how they relate to each other in memory.
      - Each Execution Context has its own Variable Environment
          - Scope = where are we able to see the variable
   
   
   The Scope Chain
      - If you do not declare a variable inside a function, inside its own variable environment...
          - Javascript will use the reference to the outer environment, the global environment created at Execution Phase
              - Lexical Environment... where something is written physically is important. It determines where things will sit in memory.
              - Function B sits lexically on top of the global environment, it's not inside function a. It's on the same level as other global objects
       - If you ask for a variable, and it cannot find that variable in the current execution environment, Javascript will look for that variable down in the execution stack, 
          and where that function sits lexically determines where it will find the variable. In this case the global execution environment.
      
      Summary:
       * If a variable is not declared, Javascript will keep looking down the stack, until it reaches global (global = outside of all functions). 
          A function's outer environment is the function it was declared in, all the way back until you hit global. 
       
       * Where a function sits lexically, determines its outer environment reference. 
          As each function is executed, execution contexts stack up, and the code is running synchronously.
   
   
   
   
   
   
   
   
   
   
      
